@namespace Reader.Shared.Product

@implements IDisposable
@using Blazored.LocalStorage
@using MudBlazor
@using Reader.Shared
@using Reader.Modules
@using Reader.Modules.Logging
@using Reader.Modules.Product
@using Reader.Modules.Reading
@using Newtonsoft.Json
@using Reader.Data.Storage
@using Reader.Data.Product
@using Reader.Data.Reading
@using Reader.Data
@using Reader.Data.ProductExceptions
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using Microsoft.AspNetCore.Http
@using Newtonsoft.Json.Linq
@using System.Text
@using Toolbelt.Blazor.HotKeys2

@inject IJSRuntime JSRuntime
@inject Constants constants
@inject AppConfig config
@inject ISnackbar Snackbar
@inject IHttpContextAccessor httpContextAccessor
@inject ILocalStorageService LocalStorage
@inject HotKeys HotKeys

@if (SetPageTitle)
{
    <PageTitle>@ReaderContext.StateManager.CurrentState.Title - @Constants.ProjectName</PageTitle>
}


<div class="@(ShowSavedStates ? "mb-24" : "mb-6")">
    <ReaderView ReaderContext="ReaderContext" ShowEditFields="ShowEditFields" CompactVersion="CompactVersion" />
</div>

@if (ShowSavedStates)
{
    <div class="flex justify-between items-center mb-15">
        <h1 class="text-lg text-b600 text-neutral-300">
            Saved Texts
        </h1>
        <div>
            <MudButton Variant="Variant.Filled" OnClick="@ToggleNewTextPanelOpen" Color="Color.Primary" Class="!py-3 !px-4 !pr-5 hover:!bg-neutral-900 centered-button-icon">
                <MudIcon Icon="@Icons.Material.Filled.Add"></MudIcon> Add
            </MudButton>
            <MudDialog @bind-IsVisible="NewTextPanelOpen" Class="rounded-lg shadow-xl !bg-bgcol" Options="dialogOptions">
                <DialogContent>
                    <div class="m-4 md:m-6" style="width: min(30rem, 90vw);">
                        <div class="flex justify-between items-center mb-4">
                            <p class="text-xl font-semibold">
                                Create new text
                            </p>
                        </div>
                        <div>
                            <h5 class="mt-4 md:mt-6 mb-5 md:mb-8 text-lg font-semibold">
                                1) Extract from website
                            </h5>
                            <MudTextField T="string" Label="Url" Variant="Variant.Outlined" @bind-Value="@ScrapeInputs.Url" />
                            <MudSelect Color="Color.Tertiary" Class="mud-select-table mt-4" Label="Method"
                                       T="string"
                                       @bind-Value="ScrapeInputs.NewTextInputMethodString">
                                <MudSelectItem T="string" Value="@("Largest article subsection")" Color="Color.Tertiary">Largest article subsection</MudSelectItem>
                                <MudSelectItem T="string" Value="@("XPath")" Color="Color.Tertiary">XPath</MudSelectItem>
                            </MudSelect>
                            @if (ScrapeInputs.NewTextInputMethodString == "XPath")
                            {
                                <div class="my-4">
                                    <MudTextField T="string" Label="XPath" Class="my-2" Variant="Variant.Outlined" @bind-Value="@ScrapeInputs.XPathInputs.XPath" />
                                    <MudSwitch T="bool" Class="my-2" Label="Select all elements that match" @bind-Value="@ScrapeInputs.XPathInputs.SelectAll" />
                                </div>
                            }
                            <MudButton Variant="Variant.Filled" OnClick="@SubmitScrapingForm" Color="Color.Primary" Class="mt-8 hover:!bg-neutral-900">
                                Load
                            </MudButton>
                        </div>
                        <div class="my-8 md:my-16">
                            <MudDivider />
                        </div>
                        <div class="">
                            <h5 class="mt-4 md:mt-6 mb-5 md:mb-8 text-lg font-semibold">
                                2) File upload
                            </h5>
                            <p class="my-2">
                                Supported file formats: @ProductConstants.SupportedFileImports
                            </p>
                            <MudFileUpload T="IReadOnlyList<IBrowserFile>" Accept=".pdf, .txt, .md, .html, .epub" FilesChanged="files => HandleFileUpload(files)" MaximumFileCount="25" Class="my-8">
                                <ButtonTemplate>
                                    <MudButton HtmlTag="label"
                                               Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               StartIcon="@Icons.Material.Filled.FileUpload"
                                               for="@context">
                                        Select Files
                                    </MudButton>
                                </ButtonTemplate>
                            </MudFileUpload>
                        </div>
                        <div class="my-8 md:my-16">
                            <MudDivider />
                        </div>
                        <div class="">
                            <h5 class="mt-4 md:mt-6 mb-5 md:mb-8 text-lg font-semibold">
                                3) Clipboard
                            </h5>
                            <MudButton Variant="Variant.Filled" OnClick="HandleFromClipboard" Color="Color.Primary" Class="hover:!bg-neutral-900">
                                Paste
                            </MudButton>
                            <MudSwitch T="bool" Class="my-2 md:my-4" Label="Reverse lines" @bind-Value="@PasteIsRightToLeft" Color="Color.Tertiary" />
                        </div>
                        <div class="my-8 md:my-16">
                            <MudDivider />
                        </div>
                        <div>
                            <h5 class="mt-4 md:mt-6 mb-5 md:mb-8 text-lg font-semibold">
                                4) Empty fields
                            </h5>
                            <MudButton Variant="Variant.Filled" OnClick="@ReaderContext.HandleNewText" Color="Color.Secondary" Class="hover:!bg-neutral-900">
                                Create
                            </MudButton>
                        </div>
                    </div>
                </DialogContent>
            </MudDialog>
        </div>
    </div>

    <div>

        @foreach (var savedState in ReaderContext.StateManager.ReaderStates) {
            <SavedStateView State="savedState" ReaderContext="ReaderContext" />
        }
    </div>
    
}

@code {
    public ReaderContext ReaderContext = default!;

    bool NewTextPanelOpen = false;
    public ScrapeInputs ScrapeInputs = new();

    [Parameter]
    public bool AllowRequestAccess { get; set; } = false;

    [FromBody]
    public string Request { get; set; } = default!;

    [Parameter]
    public bool ShowSavedStates { get; set; } = true;

    [Parameter]
    public bool ShowEditFields { get; set; } = true;

    [Parameter]
    public bool AllowHostKeys { get; set; } = true;

    [Parameter]
    public bool SetPageTitle { get; set; } = false;

    [Parameter]
    public bool CompactVersion { get; set; } = false;

    private HotKeysContext? _hotKeysContext;

    private DialogOptions dialogOptions = new() { CloseButton = true, ClassBackground = "blurry" };

    private bool PasteIsRightToLeft = false;

    protected override async Task OnInitializedAsync()
    {
        await Log.Information("ReaderPlatform: OnInitializedAsync");

        ReaderContext = new(
            new SiteInteraction(
                InvokeAsync,
                StateHasChanged,
                JSRuntime,
                Snackbar
            ),
        LocalStorage
        );

        await ReaderContext.TriggerOnInitializedEvents();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            // load config
            await ReaderContext.TriggerAfterFirstRenderEvents();

            // must be afterfirstrenderevents
            // handle usage of data from the request body
            if (AllowRequestAccess)
            {
                await TryImportStateRequestBody();
            }

            await Log.Information("ReaderPlatform: Settings", ReaderContext.Config);


            _hotKeysContext = this.HotKeys.CreateContext();
            // experimental, may override other features
            _hotKeysContext.Add(ModCode.Ctrl, Code.V, (Action)(async () => await HandleFromClipboard()));

        }
    }

    public async Task TryImportStateRequestBody()
    {
        string requestString;
        try
        {
            requestString = await GetRequestBody();
        } catch (InvalidOperationException)
        {
            return;
        }

        if (String.IsNullOrEmpty(requestString))
        {
            return;
        }

        var requestObj = JsonConvert.DeserializeObject<JObject>(requestString);

        if (requestObj == null)
        {
            Snackbar.Add("Request body was set, but not in JSON-format. This is an error of the application you are using, that directed you to the reader.", Severity.Warning);
        }

        ReaderState? RequestReaderState = null;
        string requestText = string.Empty;

        if (requestObj!["ReaderState"] != null && requestObj["ReaderState"]?.Value<string>() != null)
        {
            (ReaderState loadedState, string s)= ReaderState.ImportFromJson(JsonConvert.DeserializeObject<JObject>(requestObj!["ReaderState"]!.Value<string>()!)!);
            RequestReaderState = loadedState;
            requestText = s;
        }

        var RequestFiles = requestObj!["Files"]?.Value<List<GenericFile>?>();
        var RequestScrapeInputs = requestObj!["ScrapeInputs"]?.Value<ScrapeInputs?>();

        if (RequestReaderState != null && requestText != string.Empty)
        {
            await ReaderContext.StateManager.AddState(RequestReaderState, requestText);
        }
        else if (RequestFiles != null)
        {
            await HandleFileUpload(RequestFiles);
        }
        else if (RequestScrapeInputs != null)
        {
            var si2 = ScrapeInputs.Copy(ScrapeInputs);
            ScrapeInputs = RequestScrapeInputs;
            await SubmitScrapingForm();
            ScrapeInputs = si2;
        } else
        {
            Snackbar.Add("Importing not successful: Did not find any resource to import", Severity.Error);
            return;
        }

        Snackbar.Add("Importing successful", Severity.Success);

    }

    private async Task<string> GetRequestBody()
    {
        if (httpContextAccessor.HttpContext == null)
        {
            await Log.Warning("Unable to access HttpContext");
            throw new InvalidOperationException("Unable to access HttpContext");
        }

        if (httpContextAccessor.HttpContext!.Request == null || httpContextAccessor.HttpContext!.Request.Body == null)
        {
            throw new InvalidOperationException("Request body is null");
        }

        using (StreamReader reader = new StreamReader(httpContextAccessor.HttpContext!.Request.Body, Encoding.UTF8))
        {
            string requestContent = "";
            char[] buffer = new char[100];
            int charReadCount = await reader.ReadAsync(buffer, 0, buffer.Length);
            while (charReadCount > 0)
            {
                char[] buf2 = new char[charReadCount];
                buf2 = buffer.Take(charReadCount).ToArray();
                requestContent += String.Join("", buf2);
                charReadCount = await reader.ReadAsync(buffer, 0, buffer.Length);
            }

            return requestContent;
        }
    }

    private async Task ToggleNewTextPanelOpen()
    {
        await Log.Information("ReaderPlatform: ToggleNewTextPanelOpen");

        if (!NewTextPanelOpen && ReaderContext.Manager.ReadingStatus)
            await ReaderContext.Manager.StopReadingTask();

        NewTextPanelOpen = !NewTextPanelOpen;
    }

    private async Task HandleFileUpload(IReadOnlyList<IBrowserFile> files)
    {
        await Log.Information("ReaderPlatform: HandleFileUpload");

        try
        {
            (ReaderState state, string content) = await FileImporter.ExtractFromBrowserFiles(files);
            await ReaderContext.StateManager.AddState(state, content);
        }
        catch (UnsupportedOperationException e)
        {
            Snackbar.Add(e.Message, Severity.Error);
            await Log.Information("ReaderPlatform: HandleFileUpload - UnsupportedOperationException {error}, {stack}", e.Message, e.StackTrace ?? "No trace");
        }
    }

    private async Task SubmitScrapingForm()
    {
        await Log.Information("ReaderPlatform: SubmitScrapingForm");

        try
        {
            await ReaderContext.StateManager.AddState(await ReaderState.Scrape(ScrapeInputs));
        }
        catch (ScrapingException e)
        {
            Snackbar.Add(e.Message, Severity.Error);
            await Log.Information("ReaderPlatform: SubmitScrapingForm - ScrapingException {error}, {stack}", e.Message, e.StackTrace ?? "No trace");
        }
    }

    private async Task HandleFromClipboard()
    {
        await Log.Information("ReaderPlatform: HandleFromClipboard");

        try
        {
            var clipboardText = await JSRuntime.InvokeAsync<string>("getClipboardContent");

            if (PasteIsRightToLeft)
            {
                var lines = clipboardText
                    .Split('\n')
                    .Select(text => TextHelper.SeparateText(TextHelper.Sanitize(text)))
                    .Select(words => words.Reverse())
                    .Select(words => TextHelper.JoinWords(words));
                clipboardText = string.Join(" ", lines); // newlines arent separated in TextHelper.SeparateText - hence here instead
            }

            var title = clipboardText.Substring(0, Math.Min(20, clipboardText.Length));
            if (clipboardText.Length > 20)
                title += "...";

            var state = new ReaderState(title, clipboardText, ReaderStateSource.Clipboard, "Created from clipboard's contents");
            await ReaderContext.StateManager.AddState(state, clipboardText);
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
            await Log.Information("ReaderPlatform: HandleFromClipboard - ClipboardException {error}, {stack}", e.Message, e.StackTrace ?? "No trace");
        }

    }

    public void Dispose()
    {
        _hotKeysContext?.Dispose();
    }
}